/* @macrome
 * @generated-from ./$interleave.js
 * This file is autogenerated. Please do not edit it directly.
 * When editing run `npx macrome watch` then change the file this is generated from.
 */
import { asyncEnsureIterable, asyncIterableCurry } from '../../internal/async-iterable';
import AsyncInterleaveBuffer from './internal/async-buffer';
import asyncMakeCanTakeAny from './internal/async-can-take-any';

export async function* asyncInterleave(sources, generateInterleaved, options) {
  const buffers = sources.map(
    (iterable, i) =>
      new AsyncInterleaveBuffer(asyncEnsureIterable(iterable)[Symbol.asyncIterator](), i),
  );

  try {
    const canTakeAny = asyncMakeCanTakeAny(buffers);

    yield* options !== undefined
      ? generateInterleaved(options, canTakeAny, ...buffers)
      : generateInterleaved(canTakeAny, ...buffers);
  } finally {
    for (const buffer of buffers) {
      if ((await buffer.canTake()) && typeof buffer._iterator.return === 'function') {
        await buffer._iterator.return();
      }
    }
  }
}

export default asyncIterableCurry(asyncInterleave, {
  variadic: true,
  optionalArgsAtEnd: true,
  minArgs: 1,
  maxArgs: 2,
});
