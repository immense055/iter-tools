/* @macrome
 * @generated-from ./async-interleave.test.js
 * This file is autogenerated. Please do not edit it directly.
 * When editing run `npx macrome watch` then change the file this is generated from.
 */
import { AsyncIterable } from '../../../types/async-iterable';
import { asyncInterleave, AsyncInterleaveBuffer, asyncToArray } from '../../..';

describe('asyncInterleave', () => {
  const a = [1, 2, 3];
  const b = [4, 5, 6];
  const c = [7, 8, 9];

  it('can be used to implement a round robin interleave', async () => {
    const roundRobin = asyncInterleave(async function*(
      canTakeAny: () => Promise<AsyncInterleaveBuffer<number> | null>,
      a: AsyncInterleaveBuffer<number>,
      b: AsyncInterleaveBuffer<number>,
      c: AsyncInterleaveBuffer<number>,
    ) {
      while (await canTakeAny()) {
        if (await a.canTake()) yield await a.take();
        if (await b.canTake()) yield await b.take();
        if (await c.canTake()) yield await c.take();
      }
    });

    expect(await asyncToArray(roundRobin(a, b, c))).toEqual([1, 4, 7, 2, 5, 8, 3, 6, 9]);
  });

  it('can be passed options for the generator', async () => {
    const options = {};

    expect.assertions(1);
    await asyncToArray(
      asyncInterleave(
        // eslint-disable-next-line require-yield
        async function*(o: {}): AsyncIterable<any> {
          expect(o).toBe(options);
        },
        options,
        null,
      ),
    );
  });
});
