/* @macrome
 * @generated-from ./async-split-on.test.js
 * This file is autogenerated. Please do not edit it directly.
 * When editing run `npx macrome watch` then change the file this is generated from.
 */
import { asyncSplitOn } from '../../..';
import { asyncUnwrapDeep as asyncUw } from '../../../__tests__/async-helpers';
import { asyncWrap } from '../../../__tests__/__framework__/async-wrap';

describe('asyncSplitOn', () => {
  it('should split between every item which is equal to the on argument', async () => {
    expect(await asyncUw(asyncSplitOn(null, asyncWrap([1, null, 2, null, 3])))).toEqual([
      [1],
      [2],
      [3],
    ]);
  });

  it('should throw when splits are consumed out of order', async () => {
    const parts = asyncSplitOn(null, asyncWrap([1, null, 2]));
    const a = (await parts.next()).value;
    const b = (await parts.next()).value;
    let error;
    try {
      await asyncUw([b, a]);
    } catch (e) {
      error = e;
    }
    expect(error).toMatchSnapshot();
  });

  it('should yield [] between two separators', async () => {
    expect(await asyncUw(asyncSplitOn(null, asyncWrap([1, null, null, 3])))).toEqual([
      [1],
      [],
      [3],
    ]);
  });

  it('should yield [], [] when only separator', async () => {
    expect(await asyncUw(asyncSplitOn(null, asyncWrap([null])))).toEqual([[], []]);
  });

  it('passes through the empty iterable', async () => {
    expect(await asyncUw(asyncSplitOn(0, null))).toEqual([]);
  });
});
